language: go

# Only the last two Go releases are supported by the Go team with security
# updates. Any versions older than that should be considered deprecated.
# Don't bother testing with them. tip builds your code with the latest
# development version of Go. This can warn you that your code will break
# in the next version of Go. Don't worry! Later we declare that test runs
# are allowed to fail on Go tip.
go:
  - 1.9
  # - master

# Skip the install step. Don't `go get` dependencies. Only build with the
# code in vendor/
install: true

matrix:
  # It's ok if our code fails on unstable development versions of Go.
  allow_failures:
    - go: master
  # Don't wait for tip tests to finish. Mark the test run green if the
  # tests pass on the stable versions of Go.
  fast_finish: true

# Don't email me the results of the test runs.
notifications:
  email: false

cache:
    directories:
        - /home/travis/gopath/src/github.com/urban-1/gopipe/build

env:
    PKG_CONFIG_PATH=/home/travis/gopath/src/github.com/urban-1/gopipe/build/local/lib/pkgconfig LD_LIBRARY_PATH=/home/travis/gopath/src/github.com/urban-1/gopipe/build/local/lib

# Anything in before_script that returns a nonzero exit code will
# flunk the build and immediately stop. It's sorta like having
# set -e enabled in bash.
before_script:
  - KAFKA_VERSION=v0.11.0
  - MODS="./input ./proc ./output"
  - GO_FILES=$(find . -iname '*.go' -type f | grep -v /vendor/) # All the .go files, excluding vendor/
  - GO_IMPORTS=$(go list -f '{{join .Imports "\n"}}{{"\n"}}{{join .TestImports "\n"}}' $MODS | sort | uniq | grep -v gopipe)
  - go get -u -v -d $GO_IMPORTS
  - ( mkdir -p ./build/src;
      mkdir -p ./build/local;
      cd ./build/src;
      git clone https://github.com/edenhill/librdkafka.git;
      cd librdkafka;
      git checkout $KAFKA_VERSION;
      ./configure --prefix=/home/travis/gopath/src/github.com/urban-1/gopipe/build/local &&
      make &&
      make install)
  - cat $PKG_CONFIG_PATH/rdkafka.pc

# script always run to completion (set +e). All of these code checks are must haves
# in a modern Go project.
script:
  - test -z "$(gofmt -s -l $GO_FILES)"       # Fail if a .go file hasn't been formatted with gofmt
  - go test -v -cover $MODS
  - go vet $MODS                             # go vet is the official Go static analyzer
